<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">



	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>


	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<bean id="myRealm" class="com.kenny.app.web.system.interceptor.shiro.MyRealm">
		<property name="cachingEnabled" value="false" />
	</bean>
	
	<!-- 配置权限管理器 -->
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session --> 
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 --> 
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->  
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 使用自定义shiro -->
		<property name="realm" ref="myRealm" />
		<!-- 使用缓存管理器 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>
		
	<!-- 配置shiro的过滤工厂 id和web.xml里面一样 -->
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!--调用配置的权限管理 ，必须的属性-->
		<property name="securityManager" ref="securityManager" />
		<!-- 配置登陆请求地址，要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 --> 
		<property name="loginUrl" value="/login" />
		<!-- 配置登陆成功地址 如果访问的地址为非/tologin，则跳到访问地址 -->
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码了) -->  
   		<!-- <property name="successUrl" value="/main/index"/> -->  
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->  
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<property name="unauthorizedUrl" value="/unauthorizedUrl.jsp" /><!-- 未授权 -->
		<!-- 权限配置 -->
    
		<property name="filterChainDefinitions">
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
   		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
			<value>
				/login** = anon
				/static/**/**/* = anon
				/main/**= authc  
				<!-- 所有请求都需要（除去配置的静态资源或请求地址为anno的请求）通过登陆验证，如果未登录怎跳转至/tologin -->
				/main/system/**=perms[admin:manage]
				/**		= authc
			</value>
		</property>
	</bean>
<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
 
</beans>